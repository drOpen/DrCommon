<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DrData</name>
    </assembly>
    <members>
        <member name="T:DrOpen.DrCommon.DrData.ResolveConflict">
            <summary>
            The parameters determine the resolution of conflicts
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.ResolveConflict.THROW_EXCEPTION">
            <summary>
            in case of error throw exception
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.ResolveConflict.SKIP">
            <summary>
            do not update the existing object/value
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.ResolveConflict.OVERWRITE">
            <summary>
            overwrite existing object/value
            </summary>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.DDNodeST">
            <summary>
            singletone of hierarchy data warehouse
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNodeST.sm_instance">
            <summary>
            static instance of root node
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNodeST.lockDDNode">
            <summary>
            object for lock
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNodeST.#cctor">
            <summary>
            private static constructor
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNodeST.#ctor">
            <summary>
            private constructor
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNodeST.GetInstance">
            <summary>
            return root
            </summary>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNodeST.GetInstance(System.String)">
            <summary>
            return named instance
            </summary>
            <param name="name">name of child node. Empty for root node</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.DDType">
            <summary>
            the type of the object
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDType.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The special constructor is used to deserialize values.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDType.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method to serialize data. The method is called on serialization.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDType.Name">
            <summary>
            Get or set name of type 
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDType.CompareTo(System.Object)">
            <summary>
            Compare type by name
            </summary>
            <param name="obj">other type for comparison as object</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDType.CompareTo(DrOpen.DrCommon.DrData.DDType)">
            <summary>
            Compare type by name
            </summary>
            <param name="other">other type for comparison</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDType.Compare(DrOpen.DrCommon.DrData.DDType,DrOpen.DrCommon.DrData.DDType)">
            <summary>
            Compares the two DDType of the same type and returns an integer that indicates whether the current instance precedes, follows, 
            or occurs in the same position in the sort order as the other object.
            The both null object is equal and return value will be Zero.
            </summary>
            <param name="value1">First DDType to compare</param>
            <param name="value2">Second DDType to compare</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has two meanings: 
            Zero - the both DDValue have some type and value.
            One - type or value is not equal.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDType.Equals(DrOpen.DrCommon.DrData.DDType)">
            <summary>
            Determines whether the specified DDType is equal to the current DDType. Returns true if the specified DDType is equal to the current DDType otherwise, false.
            </summary>
            <param name="other">other type for comparison</param>
            <returns>true if the specified DDType is equal to the current DDType otherwise, false.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDType.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current DDType. Returns true if the specified System.Object is equal to the current DDType otherwise, false
            </summary>
            <param name="other">other type for comparison as object</param>
            <returns>true if the specified System.Object is equal to the current DDType otherwise, false.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDType.GetHashCode">
            <summary>
            Returns the hash code for this DDType which get from Name property
            </summary>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDType.op_Equality(DrOpen.DrCommon.DrData.DDType,DrOpen.DrCommon.DrData.DDType)">
            <summary>
            Compare both values and return true if type and data are same otherwise return false.
            If both values are null - return true, if only one of them are null, return false. if the data types are different - return false
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if type and data are same otherwise return false</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDType.ValidateExpectedNodeType(DrOpen.DrCommon.DrData.DDType,DrOpen.DrCommon.DrData.DDType[])">
            <summary>
            Validate current node type of with expected node type. If types are not equal throw new <see cref="T:DrOpen.DrCommon.DrData.Exceptions.DDTypeExpectedException"/> otherwise nothing.
            </summary>
            <param name="currentType">current node type</param>
            <param name="expectedType">expected node type</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDType.ValidateExpectedNodeType(DrOpen.DrCommon.DrData.DDType,System.String[])">
            <summary>
            Validate current node type of with expected node type. If types are not equal throw new <see cref="T:DrOpen.DrCommon.DrData.Exceptions.DDTypeExpectedException"/> otherwise nothing.
            </summary>
            <param name="currentType">current node type</param>
            <param name="expectedType">expected node type</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDType.ValidateExpectedNodeType(System.String[])">
            <summary>
            Validate current node type of with expected node type. If types are not equal throw new <see cref="T:DrOpen.DrCommon.DrData.Exceptions.DDTypeExpectedException"/> otherwise nothing.
            </summary>
            <param name="expectedType">expected node type</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDType.ValidateExpectedNodeType(DrOpen.DrCommon.DrData.DDType[])">
            <summary>
            Validate current node type of with expected node type. If types are not equal throw new <see cref="T:DrOpen.DrCommon.DrData.Exceptions.DDTypeExpectedException"/> otherwise nothing.
            </summary>
            <param name="expectedType">expected node type</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.DDValue">
            <summary>
            Data warehouse
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.#ctor">
            <summary>
            Create empty value
            There are nullable type and data.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.#ctor(System.Object)">
            <summary>
            Creates value with data. If type of object isn't supported throw application exception
            Supports the following types: string, char, bool, byte, DateTime, short, int, float, long, ushort, uint, ulong, double or an array of the above types
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The special constructor is used to deserialize values.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method to serialize data. The method is called on serialization.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDValue.Type">
            <summary>
            Get the type of data stored
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDValue.Size">
            <summary>
            size in bytes of the stored data
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.SetValue(System.Object)">
            <summary>
            Set value by object type
            </summary>
            <param name="value">object</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.SetHEXValue(System.Type,System.String)">
            <summary>
            Set value from HEX string with specified type
            </summary>
            <param name="t">type of data</param>
            <param name="hex">HEX</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetByteArray(System.Object)">
            <summary>
            Convert oject supported type to byte array (byte []).
            Supports the following types: string, char, bool, byte, DateTime, short, int, float, long, ushort, uint, ulong, double or an array of the above types
            </summary>
            <param name="value">object to convert</param>
            <returns>byte []</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetByteArray(System.Type,System.Object)">
            <summary>
            Convert object by specified type to byte array (byte []).
            Supports the following types: string, char, bool, byte, DateTime, short, int, float, long, ushort, uint, ulong, double or an array of the above types
            </summary>
            <param name="value">object to convert</param>
            <param name="type">convert object as the specified data type</param>
            <returns>byte []</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetByteArrayFromDecimal(System.Decimal)">
            <summary>
            Converts decimal to byte array
            </summary>
            <param name="dec">decimal number for converting</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetDecimalFromByteArray(System.Byte[])">
            <summary>
            Converts bytes array to decimal
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetByteArrayByTypeFromString(System.Type,System.String)">
            <summary>
            Convert string to byte[] by specified type.
            Supports the following types: string, char, bool, byte, DateTime, short, int, float, long, ushort, uint, ulong, decimal, double or an array of the above types
            </summary>
            <param name="type">convert by specified type</param>
            <param name="value">string to convert</param>
            <returns>Converted byte[] by specified type</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.JoinByteArray(System.Array)">
            <summary>
            Returns an array of data as a byte[]. 
            Array of the bellow types  char, bool, byte, DateTime, short, int, float, long, ushort, uint, ulong, double
            </summary>
            <param name="value"></param>
            <returns>byte []</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetValue">
            <summary>
            Get value by current type
            </summary>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetValue(System.Type)">
            <summary>
            Returns value by specified type
            </summary>
            <param name="t">type</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetValueAsArray``1">
            <summary>
            Get value as array by specified type
            </summary>
            <typeparam expected="T">The type of return array value.</typeparam>
            <returns>Returns array by specified type</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetValueAs``1">
            <summary>
            Get value by specified type
            </summary>
            <typeparam expected="T">The type of return value.</typeparam>
            <returns>Returns value by specified type</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetDefaultValueByType``1">
            <summary>
            Returns String.Empty for string and default value for all others supported types.
            </summary>
            <typeparam name="T">supported types</typeparam>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetValueAsHEX">
            <summary>
            Return value as string as HEX
            </summary>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.ValidateType(System.Object)">
            <summary>
            Checks the type of object.
            Supports the following types: string, char, bool, byte, DateTime, short, int, float, long, ushort, uint, ulong, double and Guid or an array of the above types
            </summary>
            <param name="value">object whose type will be validate</param>
            <returns>true if type of object is supported, otherwise false</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.ValidateType(System.Type)">
            <summary>
            Checks the type.
            Supports the following types: string, char, bool, byte, sbye, DateTime, short, int, float, long, ushort, uint, ulong, double, decimal and Guid or an array of the above types. 
            Nullable array type is not supported.
            </summary>
            <param name="type">type for validation</param>
            <returns>rue if type is supported, otherwise false</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetObjSize(System.Object)">
            <summary>
            Return the sizePerElements of occupied space in the memory of the object.
            <exception cref="T:System.ApplicationException">If the object type is not supported throw application exception</exception>
            </summary>
            <param name="obj">object for analyze</param>
            <returns>Size in value</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetPrimitiveSize(System.Type)">
            <summary>
            Returns the sizePerElements of occupied space in the memory of the primitive.
            <exception cref="T:System.ApplicationException">If the object type is not supported throw application exception</exception>
            </summary>
            <param name="type">Type for analyze</param>
            <returns>Size for this type</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetArraySize(System.Array)">
            <summary>
            Return the sizePerElements of occupied space in the memory of the array.
            <exception cref="T:System.ApplicationException">If the object type is not supported throw application exception.</exception>
            </summary>
            <param name="value">array to analyze</param>
            <returns>Size in value</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.Clone">
            <summary>
            Creates a new object that is a copy of the current instance. The resulting clone must be of the same type as, or compatible with, the original instance.
            The resulting clone must be of the same type as, or compatible with, the original instance.
            </summary>
            <returns>A new DDAtribute that is a copy of this instance.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new DDAtribute that is a copy of this instance.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetHashCode">
            <summary>
            Return HashCode from blob -> byte[]
            </summary>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            The type of comparison between the current instance and the obj parameter depends on whether the current instance is a reference type or a value type.
            </summary>
            <param name="other">The object to compare with the current object. </param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.Equals(DrOpen.DrCommon.DrData.DDValue)">
            <summary>
            Determines whether the specified object is equal to the current object.
            The type of comparison between the current instance and the obj parameter depends on whether the current instance is a reference type or a value type.
            </summary>
            <param name="other">The object to compare with the current object. </param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.op_Equality(DrOpen.DrCommon.DrData.DDValue,DrOpen.DrCommon.DrData.DDValue)">
            <summary>
            Compare both values and return true if type and data are same otherwise return false.
            If both values are null - return true, if only one of them are null, return false. if the data types are different - return false
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if type and data are same otherwise return false</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.Compare(DrOpen.DrCommon.DrData.DDValue,DrOpen.DrCommon.DrData.DDValue)">
            <summary>
            Compares the two DDValue of the same type and returns an integer that indicates whether the current instance precedes, follows, 
            or occurs in the same position in the sort order as the other object.
            The both null object is equal and return value will be Zero.
            </summary>
            <param name="value1">First DDValue to compare</param>
            <param name="value2">Second DDValue to compare</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has two meanings: 
            Zero - the both DDValue have some type and value.
            One - type or value is not equal.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.CompareTo(System.Object)">
            <summary>
            Compares the current DDValue instance with another object of the same type and returns an integer that indicates whether the current instance precedes, 
            follows, or occurs in the same position in the sort order as the other object.
            The both null object is equal and return value will be Zero.
            </summary>
            <param name="obj">An object to compare with this instance. </param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has two meanings: 
            Zero - This instance occurs in the same position in the sort order as obj.
            One - This instance follows obj in the sort order.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetObjAsStringByType(System.Type,System.Object)">
            <summary>
            Convert object to string with some tricks. 
            <see cref="T:System.DateTime"/> - ISO 8601 format; round-trip format for Single, Double, and BigInteger types.
            </summary>
            <param name="type">type of object</param>
            <param name="value">value to convert</param>
            <returns>value as string</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.ToString">
            <summary>
            Return data as string.
            <example>Sample: DateTime -> ISO 8601 format, bool: true -> "True"; int: 123 -> "123"; string: "test" -> "test"; byte: 255 -> "255"; byte[]: 128 15 -> "800F"</example>
            </summary>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.ToStringArray">
            <summary>
            Return data as string array.
            <example>Sample: DateTime -> ISO 8601 format, bool: true -> "True"; int: 123 -> "123"; string: "test" -> "test"; byte: 255 -> "255"; byte[]: 128 15 -> "800F"</example>
            </summary>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.HEX(System.Byte[])">
            <summary>
            Convert byte[] to HEX string
            </summary>
            <param name="byteArray">byte array to convertion</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.HEX(System.String)">
            <summary>
            Convert byte[] to HEX string
            </summary>
            <param name="hex">byte array to convertion</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.ConvertToArray``1">
            <summary>
            Converts current value to specified array type. Specify elemnt type 'int' not array type 'int[]'
            </summary>
            <typeparam name="T">Element type, for example, 'bool'. Don't specify array type 'bool[]'.</typeparam>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.ConvertTo``1">
            <summary>
            Converts current value to specify type. Don't specify array type
            </summary>
            <typeparam name="T">New type</typeparam>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.ConvertFromStringTo(System.Type,System.String)">
            <summary>
            Convert string to specified type.
            Supports the following types: byte, byte[], string, DateTime, bool, char, double, short, int, float, long, ushort, uint, ulong, double, Guid
            </summary>
            <param name="type">convert to specified type</param>
            <param name="value">string to convert</param>
            <returns>Converted object to specified type</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.ConvertFromStringArrayTo(System.Type,System.String[])">
            <summary>
            Convert string[] to specified type.
            Supports the following types: byte[], string[], DateTime[], bool[], char[], double[], short[], int[], float[], long[], ushort[], uint[], ulong[], double[], Guid[]
            </summary>
            <param name="type">convert to specified type</param>
            <param name="value">string array to convert</param>
            <returns>Converted object to specified type</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetStubArrayByType(System.Type,System.Int32)">
            <summary>
            Returns specified type of array and lenght
            Supports the following types: byte[], string[], DateTime[], bool[], char[], double[], short[], int[], float[], long[], ushort[], uint[], ulong[], double[], Guid[]
            </summary>
            <param name="type">create array of this type</param>
            <param name="lenght">total number of elements</param>
            <returns>Returns specified type of array and lenght</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.GetTypeCode">
            <summary>
            Returns the TypeCode for this instance.
            </summary>
            <returns>The enumerated constant that is the TypeCode of the class or value type that implements this interface.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            returns value as Date Time format
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            returns value as decimal
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            returns value as double
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            returns value as short
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            returns value as int
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            returns value as long
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            returns value as sbyte
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            returns value as float
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            returns value as string
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an Object of the specified Type that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <param name="conversionType">The Type to which the value of this instance is converted.</param>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information.</param>
            <returns>An Object instance of type conversionType whose value is equivalent to the value of this instance.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            returns value as ushort
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            returns value as uint
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDValue.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Return value as ulong
            </summary>
            <param name="provider">this parametr will be ignored</param>
            <returns></returns>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.DDNode">
            <summary>
            Hierarchy data warehouse
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The special constructor is used to deserialize values.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method to serialize data. The method is called on serialization.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Clone">
            <summary>
            Creates a duplicate of this node.
            Cloning an Node copies all attributes and their value
            This method recursively clones the node and the subtree underneath it. Clone is equivalent to calling CloneNode(true).
            </summary>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Clone(System.Boolean)">
            <summary>
            Creates a duplicate of the node, when overridden in a derived class.
            </summary>
            <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the specified node. </param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Clone(System.Boolean,System.Boolean)">
            <summary>
            Creates a duplicate of the node, when overridden in a derived class.
            </summary>
            <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the specified node. </param>
            <param name="mergeParentAttributes">Merges all attributes from all parent nodes (including root node) for attribute collection of cloned node only. 
            The conflicted attributes by same name will be skipped.</param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.GetMergedParentAttributes(DrOpen.DrCommon.DrData.DDNode,DrOpen.DrCommon.DrData.ResolveConflict)">
            <summary>
            Returns attributes collection contains merged all attributes from all parent nodes (including root node) for specific node
            </summary>
            <param name="n">node</param>
            <param name="rc">conflict resolution</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Clone(System.Boolean,System.Boolean,DrOpen.DrCommon.DrData.ResolveConflict)">
            <summary>
            Merges all attributes from all parent nodes (including root node) for attribute collection of specific node
            </summary>
            <param name="n">node</param>
            <param name="mergeParentAttributes">Merges all attributes from all parent nodes (including root node) for attribute collection of cloned node only</param>
            <param name="rc">conflict resolution for merge attributes</param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Attribute Collection (IEnumerator&lt;KeyValuePair&lt;string, DDNode&gt;&gt;).
            </summary>
            <returns>IEnumerator&lt;KeyValuePair&lt;string, DDNode&gt;&gt;</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Attribute Collection (IEnumerator&lt;KeyValuePair&lt;string, DDNode&gt;&gt;).
            </summary>
            <returns>IEnumerator&lt;KeyValuePair&lt;string, DDNode&gt;&gt;</returns>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.Type">
            <summary>
            Type of node
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.childNodes">
            <summary>
            Dictonary of children nodes
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.Parent">
            <summary>
            Gets the parent of this node (for nodes that can have parents).
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.Name">
            <summary>
            Gets the qualified name of the node
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.Level">
            <summary>
            The current level of this node
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Add">
            <summary>
            Adds a child node with auto generated name
            </summary>
            <returns>new node</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Add(System.String)">
            <summary>
            Adds a child node with specified name
            </summary>
            <param name="name">child node name</param>
            <returns>new node</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Add(System.String,System.String)">
            <summary>
            Adds a child node with specified name
            </summary>
            <param name="name">child node name</param>
            <param name="type">node type</param>
            <returns>new node</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Add(System.Enum)">
            <summary>
            Adds a child node with specified name
            </summary>
            <param name="name">child node name</param>
            <returns>new node</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Add(System.Enum,System.Enum)">
            <summary>
            Adds a child node with specified name
            </summary>
            <param name="name">child node name</param>
            <param name="type">node type</param>
            <returns>new node</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Add(DrOpen.DrCommon.DrData.DDNode)">
            <summary>
            Adds the specified node as child
            </summary>
            <param name="node">child node</param>
            <returns>added child node</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Add(DrOpen.DrCommon.DrData.DDNode,DrOpen.DrCommon.DrData.ResolveConflict)">
            <summary>
            Adds the specified node as child
            </summary>
            <param name="node">child node</param>
            <param name="resolve">Rules of behavior in conflict resolution names.
            Throw a new exception; <exception cref="T:DrOpen.DrCommon.DrData.Exceptions.DDNodeExistsException"/>
            Update the existing value;
            Skip this action and preserve exists node
            </param>
            <returns>added child node</returns>
            <exception cref="T:DrOpen.DrCommon.DrData.Exceptions.DDNodeNullException"/>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.IsNameCorect(System.String)">
            <summary>
            Checks whether specified name is used as a DDNode name.
            The node name cannot contain '/' character. As not well as having a name equal to one '.' or two '..' points.
             </summary>
            <param name="name">node name</param>
            <returns>return true if name is well, otherwise, false.</returns>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.Item(System.String)">
            <summary>
            Get child node by name
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.Item(System.Enum)">
            <summary>
            Get child node by name
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.TryGetNode(System.Enum,DrOpen.DrCommon.DrData.DDNode@)">
            <summary>
            Gets the child node associated with the specified name.
            </summary>
            <param name="path">child node name or node path</param>
            <param name="node">When this method returns, contains the child node associated with the specified name, if the name is found; 
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. </param>
            <returns>true if the node contains an child node with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.TryGetNode(System.String,DrOpen.DrCommon.DrData.DDNode@)">
            <summary>
            Gets the child node associated with the specified name.
            </summary>
            <param name="path">child node name or node path</param>
            <param name="node">When this method returns, contains the child node associated with the specified name, if the name is found; 
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. </param>
            <returns>true if the node contains an child node with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Contains(System.String)">
            <summary>
            Determines whether this node contains the child node with specified name.
            </summary>
            <param name="name">child node name</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Clear">
            <summary>
            Removes all children. The all children node leave the parent.
            Removes all children nodes. Clear() is equivalent to calling Clear(false).
            </summary>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Clear(System.Boolean)">
            <summary>
            Removes all children. The children node leave the parent
            </summary>
            <param name="deep">true to recursively clear the subtree under the specified node, this method recursively remove the children nodes and the subtree underneath it; false to clear only the children itself.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Remove(System.String)">
            <summary>
            Remove child node by name.
            The child node leave the parent.
            </summary>
            <param name="name">node name</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.Count">
            <summary>
            Gets the number of children
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.HasChildNodes">
            <summary>
            Gets a value indicating whether this node has any child nodes.
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.attributes">
            <summary>
            Gets an DDAttrubutesCollection containing the attributes of this node.
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.Attributes">
            <summary>
            Gets an DDAttrubutesCollection containing the attributes of this node.
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.HasAttributes">
            <summary>
            Gets a value indicating whether this node has any attributes.
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.Path">
            <summary>
            returns the absolute path to the current node
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.GetPath">
            <summary>
            Absolute path to the current node
            </summary>
            <returns>Returns the absolute path to the current node</returns>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.IsRoot">
            <summary>
            Returns true if the current node is a root node, so contains no parent node
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.GetRoot">
            <summary>
            Gets the Root node
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.GetNode(System.Enum)">
            <summary>
            Return node by path
            </summary>
            <param name="path">Path to node. Supported relative and absolute paths. For access to root  node specify '/'. Use '.' (dot) for access to yourself and '..' (double dot) for up to parent node. </param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.GetNode(System.String)">
            <summary>
            Return node by path
            </summary>
            <param name="path">Path to node. Supported relative and absolute paths. For access to root  node specify '/'. Use '.' (dot) for access to yourself and '..' (double dot) for up to parent node. </param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.GetNextNodeNameByPath(System.String@)">
            <summary>
            Return next node name by path
            </summary>
            <param name="path">Path to node. For access to root  node specify '/'. Use '.' (dot) for access to yourself and '..' (double dot) for up to parent node. </param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.LeaveParent">
            <summary>
            Leave the parent node.
            This node will be leave from current parent and node became a independent parent
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Equals(DrOpen.DrCommon.DrData.DDNode)">
            <summary>
            Determines whether the specified DDNode is equal to the current DDNode. (Inherited from Object.)
            </summary>
            <param name="other">The DDNode to compare with the current DDNode. </param>
            <returns>true if the specified DDNode is equal to the current DDNode otherwise, false.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current DDNode. (Inherited from Object.)
            </summary>
            <param name="other">The object to compare with the current DDNode. </param>
            <returns>true if the specified object is equal to the current DDNode otherwise, false.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current DDNode.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.op_Equality(DrOpen.DrCommon.DrData.DDNode,DrOpen.DrCommon.DrData.DDNode)">
            <summary>
            Compare both values and return true if type and data are same otherwise return false.
            The both null object is equal and return value will be true. Very slow
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if type and data are same otherwise return false</returns>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.DDNode.NODE_COMPARISION_RESULT">
            <summary>
            The result of the comparison of two notes
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.NODE_COMPARISION_RESULT.NODE_EQUAL">
            <summary>
            The both nodes are equal. (Including if both nodes are null)
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.NODE_COMPARISION_RESULT.NODE_ATTRIBUTES_NOT_EQUAL">
            <summary>
            Attributes nodes or attributes of her children are not equal
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.NODE_COMPARISION_RESULT.NODE_NULL">
            <summary>
            Only one of the nodes is equal to zero
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.NODE_COMPARISION_RESULT.NODE_TYPE_MISMATCH">
            <summary>
            Type of node or the type of her children are not equal
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.NODE_COMPARISION_RESULT.NODE_CHILD_NODES_NOT_EQUAL">
            <summary>
            Child nodes are not equal
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Compare(DrOpen.DrCommon.DrData.DDNode,DrOpen.DrCommon.DrData.DDNode)">
            <summary>
            Compares the two DDNode of the same values and returns an integer that indicates whether the current instance precedes. Very slow. 
            Return value that indicates the relative order of the objects being compared. The return value can be one of the <typeparamref name="NODE_COMPARISION_RESULT"/>
            </summary>
            <param name="value1">First DDNode to compare</param>
            <param name="value2">Second DDNode to compare</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value can be one of the <typeparamref name="NODE_COMPARISION_RESULT"/></returns>>
            Zero - the both DDNode have some items and their values otherwise nodes are not equals
            <remarks>Very slow. The following properties are not involved in the comparison:
            - IsRoot; - Path; - Level
            </remarks>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.CompareTo(System.Object)">
            <summary>
            Compares the current DDNode instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance. </param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has two meanings: 
            Zero - the both DDNode have some items and their values.
            The difference between the number of elements of the first and second DDNode objects
            One - values of collection is not equal.</returns>
            <remarks>Very slow. The following properties are not involved in the comparison:
            - IsRoot; - Path; - Level
            </remarks>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.Names">
            <summary>
            Gets a collection containing the names of child
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDNode.Values">
            <summary>
            Gets a collection containing the values of child
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.TpException">
            <summary>
            Type of node which describes Exception
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.NdData">
            <summary>
            Node name which contains Data for current Exception
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.NdInnerException">
            <summary>
            Node name which contains InnerException for current Exception
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.AttStackTrace">
            <summary>
            Attribute name with stack trace for node which describes Exception
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.AttSource">
            <summary>
            Attribute name with Source for node which describes Exception
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.AttHelpLink">
            <summary>
            Attribute name with HelpLink for node which describes Exception
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.AttType">
            <summary>
            Attribute name with Type of Exception
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.AttMessage">
            <summary>
            Attribute name with Message of Exception
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.op_Implicit(System.Exception)~DrOpen.DrCommon.DrData.DDNode">
            <summary>
            transformation exception to node
            </summary>
            <param name="e">exception to transform</param>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.SetNodeAttributeFromException(DrOpen.DrCommon.DrData.DDNode,System.Exception)">
            <summary>
            Set exception field to node attributes
            </summary>
            <param name="n"></param>
            <param name="e"></param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.GetDataSize">
            <summary>
            size in bytes of the stored data for all attributes in the current node and her children
            </summary>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.GetSize">
            <summary>
            size in bytes of the node name, stored data and names for all attributes in the current node and her children
            </summary>
            <returns></returns>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.DDNode.DDNODE_MERGE_OPTION">
            <summary>
            Options of merge nodes
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.DDNODE_MERGE_OPTION.ATTRIBUTES">
            <summary>
            Merge attributes collection
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.DDNODE_MERGE_OPTION.CHILD_NODES">
            <summary>
            Merge child nodes. It's equals <paramref name="HIERARCHY_ONLY"/>
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.DDNODE_MERGE_OPTION.HIERARCHY_ONLY">
            <summary>
            Merge hierarchy only.
            </summary>
        </member>
        <member name="F:DrOpen.DrCommon.DrData.DDNode.DDNODE_MERGE_OPTION.ALL">
            <summary>
            Merge hierarchy and attributes
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Merge(DrOpen.DrCommon.DrData.DDNode)">
            <summary>
            Merge data with source node. The hierarchy and attributes will be merged. In case of conflict, an appropriate exception is thrown
            </summary>
            <param name="node">Source node. Node will be taken to transfer the data to destination node</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Merge(DrOpen.DrCommon.DrData.DDNode,DrOpen.DrCommon.DrData.DDNode.DDNODE_MERGE_OPTION,DrOpen.DrCommon.DrData.ResolveConflict)">
            <summary>
            Merge data with source node
            </summary>
            <param name="node">Source node. Node will be taken to transfer the data to destination node</param>
            <param name="option">Options of merge nodes</param>
            <param name="res">The option determine the resolution of conflicts of merge nodes</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.Move(DrOpen.DrCommon.DrData.DDNode,DrOpen.DrCommon.DrData.ResolveConflict)">
            <summary>
            Moves current node as child to destination node. The current and the destination nodes should have the same root.
            </summary>
            <param name="destinationNode">destination node. New parent for current node</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDNode.AreTheseNodesGrowFromATree(DrOpen.DrCommon.DrData.DDNode,DrOpen.DrCommon.DrData.DDNode)">
            <summary>
            This function returns true if nodes belong to a same tree, otherwise returns false if the current and specified node don't have the same root node.
            </summary>
            <param name="n">node to check root</param>
            <returns></returns>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.DDAttributesCollection">
            <summary>
            Represents a collection of DDValue that can be accessed by name.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The special constructor is used to deserialize attributes collection.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method to serialize data. The method is called on serialization.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Attribute Collection (IEnumerator&lt;KeyValuePair&lt;string, IDDValue&gt;&gt;).
            </summary>
            <returns>IEnumerator&lt;KeyValuePair&lt;string, IDDValue&gt;&gt;</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Attribute Collection (IEnumerator&lt;KeyValuePair&lt;string, IDDValue&gt;&gt;).
            </summary>
            <returns>IEnumerator&lt;KeyValuePair&lt;string, IDDValue&gt;&gt;</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Add(DrOpen.DrCommon.DrData.DDValue)">
            <summary>
            Add the new value and assign automatically generated name to this value
            </summary>
            <param name="value">value</param>
            <returns>Return automatically generated name for this value</returns>
            <remarks>The automatically generated name will be GUID</remarks>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Add(System.Enum,DrOpen.DrCommon.DrData.DDValue)">
            <summary>
            Add the new value by name
            </summary>
            <param name="name">uniq name for with value. If specified name exists in this collection the new application exception will be thrown</param>
            <param name="value">value</param>
            <returns>Return name for this value</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Add(System.String,DrOpen.DrCommon.DrData.DDValue)">
            <summary>
            Add the new value by name
            </summary>
            <param name="name">uniq name for with value. If specified name exists in this collection the new application exception will be thrown</param>
            <param name="value">value</param>
            <returns>Return name for this value</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Add(System.Enum,DrOpen.DrCommon.DrData.DDValue,DrOpen.DrCommon.DrData.ResolveConflict)">
            <summary>
            Add the new value by name.  
            </summary>
            <param name="name">uniq name for with value. If specified name exists in this collection the subsequent behavior depends of the specified rules</param>
            <param name="value">value</param>
            <param name="resolve">Rules of behavior in conflict resolution names.
            Throw a new exception;
            Update the existing value;
            Skip this action and preserve exists value
            </param>
            <returns>If the value was successfully added or overwritten - returns name of this value, otherwise, for example, when used ResolveConflict.SKIP, returns null</returns>
            <remarks>Generates events when overwriting or saving the current value</remarks>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Add(System.String,DrOpen.DrCommon.DrData.DDValue,DrOpen.DrCommon.DrData.ResolveConflict)">
            <summary>
            Add the new value with name.  
            </summary>
            <param name="name">uniq name for with value. If specified name exists in this collection the subsequent behavior depends of the specified rules</param>
            <param name="value">value</param>
            <param name="resolve">Rules of behavior in conflict resolution names.
            Throw a new exception;
            Update the existing value;
            Skip this action and preserve exists value
            </param>
            <returns>If the value was successfully added or overwritten - returns name of this value, otherwise, for example, when used ResolveConflict.SKIP, returns null</returns>
            <remarks>Generates events when overwriting or saving the current value</remarks>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Replace(System.Enum,DrOpen.DrCommon.DrData.DDValue)">
            <summary>
            Add the new or replace exists value by name.  
            </summary>
            <param name="name">uniq name for with value. If specified name exists in this collection the value will be updated</param>
            <param name="value">value</param>
            <returns>If the value was successfully added or updatted - returns name of this value, otherwise, returns null</returns>
            <remarks>this Method call Add with flag ResolveConflict.OVERWRITE</remarks>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Replace(System.String,DrOpen.DrCommon.DrData.DDValue)">
            <summary>
            Add the new or replace exists value by name.
            </summary>
            <param name="name">uniq name for with value. If specified name exists in this collection the value will be updated</param>
            <param name="value">value</param>
            <returns>If the value was successfully added or updatted - returns name of this value, otherwise, returns null</returns>
            <remarks>this Method call Add with flag ResolveConflict.OVERWRITE</remarks>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Contains(System.Enum)">
            <summary>
            Determines whether the Attribute Collection contains an element with the specified name.
            </summary>
            <param name="name">The name to locate in the Attribute Collection </param>
            <returns>true if the Attribute Collection contains an element with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Contains(System.String)">
            <summary>
            Determines whether the Attribute Collection contains an element with the specified name.
            </summary>
            <param name="name">The name to locate in the Attribute Collection </param>
            <returns>true if the Attribute Collection contains an element with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.ContainsValue(DrOpen.DrCommon.DrData.DDValue)">
            <summary>
            Determines whether the Attribute Collection contains the specified value. Warning! This is a very slow function!
            </summary>
            <param name="value">The value to locate in the Attribute Collection. The value can be null for reference types.</param>
            <returns>true if the Attribute Collection contains an element with the specified value; otherwise, false.</returns>
            <remarks>This method determines equality using the default comparer Compare(DDValue value1, DDValue value2);. Default for DDValue, the type of values in the dictionary.
            This method performs a linear search; therefore, the average execution time is proportional to Count. That is, this method is an O(n) operation, where n is Count.</remarks>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Remove(System.Enum)">
            <summary>
            Removes the value with the specified name
            </summary>
            <param name="name">The name of the element to remove.</param>
            <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if key is not found in the  Attribute Collection</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Remove(System.String)">
            <summary>
            Removes the value with the specified name
            </summary>
            <param name="name">The name of the element to remove.</param>
            <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if key is not found in the  Attribute Collection</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Clear">
            <summary>
            Removes all attributes from collection
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.System#ICloneable#Clone">
            <summary>
            Creates a copy of the current Attribute Collection
            </summary>
            <returns>A copy of the current Attribute Collection</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Clone">
            <summary>
            Creates a copy of the current Attribute Collection
            </summary>
            <returns>A copy of the current Attribute Collection</returns>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDAttributesCollection.Names">
            <summary>
            Gets a collection containing the names of values in this Attribute Collection
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDAttributesCollection.Values">
            <summary>
            Gets a collection containing the values in this Attribute Collection
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.TryGetValue(System.Enum,DrOpen.DrCommon.DrData.DDValue@)">
            <summary>
            Gets the value associated with the specified name.
            </summary>
            <param name="name">The name of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified name, 
            if the name is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the Attribute Collection contains an element with the specified name; otherwise, false.</returns>
            <remarks> This method combines the functionality of the Contains method and the Item property.
            If the name is not found, then the value parameter gets the appropriate default value for the type IDDValue
            Use the TryGetValue method if your code frequently attempts to access name that are not in the Attribute Collection. 
            Using this method is more efficient than catching the KeyNotFoundException thrown by the Item property.
            This method approaches an O(1) operation.</remarks>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.TryGetValue(System.String,DrOpen.DrCommon.DrData.DDValue@)">
            <summary>
            Gets the value associated with the specified name.
            </summary>
            <param name="name">The name of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified name, 
            if the name is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the Attribute Collection contains an element with the specified name; otherwise, false.</returns>
            <remarks> This method combines the functionality of the Contains method and the Item property.
            If the name is not found, then the value parameter gets the appropriate default value for the type DDValue
            Use the TryGetValue method if your code frequently attempts to access name that are not in the Attribute Collection. 
            Using this method is more efficient than catching the KeyNotFoundException thrown by the Item property.
            This method approaches an O(1) operation.</remarks>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDAttributesCollection.Item(System.Enum)">
            <summary>
            Gets the value associated with the specified name.
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDAttributesCollection.Item(System.String)">
            <summary>
            Gets the value associated with the specified name.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.GetValue(System.Enum,System.Object)">
            <summary>
            Gets the value associated with the specified name. 
            When this method returns, contains the value associated with the specified name, if the name is found; 
            otherwise, the default value for the type of the value parameter.
            </summary>
            <param name="name">attribute name</param>
            <param name="defaultValue">the default value for the type of the value parameter.</param>
            <returns>When this method returns, contains the value associated with the specified name, if the name is found; 
            otherwise, the default value for the type of the value parameter.</returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.GetValue(System.String,System.Object)">
            <summary>
            Gets the value associated with the specified name. When this method returns, 
            contains the value associated with the specified name, if the name is found; 
            otherwise, the default value for the type of the value parameter.
            </summary>
            <param name="name">attribute name</param>
            <param name="defaultValue">the default value for the type of the value parameter.</param>
            <returns>When this method returns, contains the value associated with the specified name, if the nameis found; 
            otherwise, the default value for the type of the value parameter.</returns>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.DDAttributesCollection.Count">
            <summary>
            Returns the number of elements of attributes collection.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.op_Equality(DrOpen.DrCommon.DrData.DDAttributesCollection,DrOpen.DrCommon.DrData.DDAttributesCollection)">
            <summary>
            Compare both values and return true if type and data are same otherwise return false. Very slow
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if type and data are same otherwise return false</returns>
            <remarks>The both null object is equal and return value will be true. Very slow</remarks>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Compare(DrOpen.DrCommon.DrData.DDAttributesCollection,DrOpen.DrCommon.DrData.DDAttributesCollection)">
            <summary>
            Compares the two DDAttributesCollection of the same values and returns an integer that indicates whether the current instance precedes. Very slow
            </summary>
            <param name="value1">First DDAttributesCollection to compare</param>
            <param name="value2">Second DDAttributesCollection to compare</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has two meanings: 
            Zero - the both DDAttributesCollection have some items and their values.
            The difference between the number of elements of the first and second DDAttributes Collection
            One - values of collection is not equal.</returns>
            <remarks>The both null object is equal and return value will be Zero. Very slow</remarks>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.CompareTo(System.Object)">
            <summary>
            Compares the current DDAtribute instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance. </param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has two meanings: 
            Zero - This instance occurs in the same position in the sort order as obj.
            One - This instance follows obj in the sort order.</returns>
            <remarks>The both null object is equal and return value will be Zero</remarks>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.GetDataSize">
            <summary>
            size in bytes of the stored data for all attributes
            </summary>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.GetSize">
            <summary>
            size in bytes of the stored data and names for all attributes
            </summary>
            <returns></returns>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Merge(DrOpen.DrCommon.DrData.DDAttributesCollection)">
            <summary>
            Merge attributes with source attribute collection. In case of conflict, an appropriate exception is thrown
            </summary>
            <param name="coll">Source attribute collection.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.DDAttributesCollection.Merge(DrOpen.DrCommon.DrData.DDAttributesCollection,DrOpen.DrCommon.DrData.ResolveConflict)">
            <summary>
            Merge attributes with source attribute collection.
            </summary>
            <param name="coll">Source attribute collection.</param>
            <param name="res">The parameters determine the resolution of attributes name conflicts</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDAttributeException">
            <summary>
            DrData -- attributes exception
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDAttributeException.#ctor(System.String)">
            <summary>
            DrData attributes exception
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDAttributeException.#ctor(System.String,System.String)">
            <summary>
            DrData attributes exception
            </summary>
            <param name="name">Attribute name</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDAttributeException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            DrData attributes exception
            </summary>
            <param name="name">Attribute name</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Exceptions.DDAttributeException.Name">
            <summary>
            Name of type
            </summary>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDMissingAttributeException">
            <summary>
            DrData -- attribute exception -- attribute doesn't exist
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDMissingAttributeException.#ctor(System.String)">
            <summary>
            attribute doesn't exist
            </summary>
            <param name="name">attribute name</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDMissingAttributeException.#ctor(System.String,System.Exception)">
            <summary>
            attribute doesn't exist
            </summary>
            <param name="name">attribute name</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDMissingSomeOfAttributesException">
            <summary>
            DrData -- attributes exception -- attributes don't exist
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DrOpen.DrCommon.DrData.Exceptions.DDMissingSomeOfAttributesException.#ctor(System.String[])" -->
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDMissingSomeOfAttributesException.#ctor(System.Exception,System.String[])">
            <summary>
            attributes don't exist
            </summary>
            <param name="name">attributes names</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Exceptions.DDMissingSomeOfAttributesException.Names">
            <summary>
            attributes names
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Exceptions.DDMissingSomeOfAttributesException.Name">
            <summary>
            gets attributes name as string
            </summary>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDAttributeExistsException">
            <summary>
            DrData -- attribute already exist exception
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDAttributeExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DDAttributeExistsException class with the default error message.
            <param name="name">Attribute name</param>
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDAttributeExistsException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DDAttributeExistsException class with the specified error message.
            </summary>
            <param name="name">Attribute name</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDAttributeExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDAttributeExistsException class with the default error message.
            </summary>
            <param name="name">Attribute name</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDAttributeExistsException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            nitializes a new instance of the DDAttributeExistsException class with the specified error message.
            </summary>
            <param name="name">Attribute name</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDNodeException">
            <summary>
            DrData -- node exception
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeException.#ctor">
            <summary>
            DrData node exception
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeException.#ctor(System.String)">
            <summary>
            DrData node exception
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeException.#ctor(System.String,System.Exception)">
            <summary>
            DrData node exception
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDNodeAddNodeWithParent">
            <summary>
            DrData -- node exception -- the exception that is thrown when you try to add node which has another parent node.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeAddNodeWithParent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DDNodeAddNodeWithParent class with the default error message.
            </summary>
            <param name="path">Path to node</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeAddNodeWithParent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DDNodeAddNodeWithParent class with a specified error message.
            </summary>
            <param name="path">path to node</param>
            <param name="message">A message that describes the error</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeAddNodeWithParent.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodeAddNodeWithParent class with the default message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="path">path to node</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeAddNodeWithParent.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodeAddNodeWithParent class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="path">path to node</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDNodeAddSelf">
            <summary>
            DrData -- node exception -- the exception that is thrown when you try to add yourself as child node.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeAddSelf.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DDNodeAddSelf class with the default error message.
            </summary>
            <param name="path">Path to node</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeAddSelf.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DDNodeAddSelf class with a specified error message.
            </summary>
            <param name="path">path to node</param>
            <param name="message">A message that describes the error</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeAddSelf.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodeAddSelf class with the default message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="path">path to node</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeAddSelf.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodeAddSelf class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="path">path to node</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDNodeNullException">
            <summary>
            DrData -- node exception -- the exception that is thrown when the node is null.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeNullException.#ctor">
            <summary>
            Initializes a new instance of the DDNodeAddNullException class with the default error message.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeNullException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DDNodeAddNullException class with a specified error message.
            </summary>
            <param name="message">A message that describes the error</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeNullException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the DDNodeAddNullException class with the default message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeNullException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodeAddNullException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDNodeNullPathException">
            <summary>
            DrData -- node exception -- the exception that is thrown when the node path is null.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeNullPathException.#ctor">
            <summary>
            Initializes a new instance of the DDNodeNullPathException class with the default error message.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeNullPathException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DDNodeNullPathException class with a specified error message.
            </summary>
            <param name="message">A message that describes the error</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeNullPathException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the DDNodeNullPathException class with the default message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeNullPathException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodeNullPathException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDNodePathAboveRootException">
            <summary>
            DrData -- node exception -- the exception that is thrown when you try to rise above the root node.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodePathAboveRootException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DDNodePathAboveRootException class with the default error message.
            </summary>
            <param name="path">Path to node</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodePathAboveRootException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DDNodePathAboveRootException class with a specified error message.
            </summary>
            <param name="path">path to node</param>
            <param name="message">A message that describes the error</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodePathAboveRootException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodePathAboveRootException class with the default message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="path">path to node</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodePathAboveRootException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodePathAboveRootException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="path">path to node</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDNodePathException">
            <summary>
            DrData -- node exception -- the exception that is thrown when the node path is incorrect.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodePathException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DDNodePathException class with the default error message.
            </summary>
            <param name="path">Path to node</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodePathException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DDNodePathException class with a specified error message.
            </summary>
            <param name="path">path to node</param>
            <param name="message">A message that describes the error</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodePathException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodePathException class with the default message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="path">path to node</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodePathException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodePathException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="path">path to node</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Exceptions.DDNodePathException.Path">
            <summary>
            path to node
            </summary>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDNodeMergeNameException">
            <summary>
            DrData -- node exception -- the exception that is thrown when the node name is incorrect.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeMergeNameException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DDNodeMergeNameException class with the default error message.
            </summary>
            <param name="name">Node name</param>
            <param name="destinationPath">path to destination node</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeMergeNameException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DDNodeMergeNameException class with a specified error message.
            </summary>
            <param name="name">name of node</param>
            <param name="destinationPath">path to destination node</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeMergeNameException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodeMergeNameException class with the default message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="name">Node name</param>
            <param name="destinationPath">path to destination node</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeMergeNameException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
             Initializes a new instance of the DDNodeMergeNameException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="name">Node name</param>
            <param name="destinationPath">path to destination node</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Exceptions.DDNodeMergeNameException.DestinationPath">
            <summary>
            destination path to node
            </summary>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDNodeIncorrectNameException">
            <summary>
            DrData -- node exception -- the exception that is thrown when the node name is incorrect.
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeIncorrectNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DDNodeIncorrectNameException class with the default error message.
            </summary>
            <param name="name">Node name</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeIncorrectNameException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DDNodeIncorrectNameException class with a specified error message.
            </summary>
            <param name="name">name of node</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeIncorrectNameException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodeIncorrectNameException class with the default message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="name">Node name</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeIncorrectNameException.#ctor(System.String,System.String,System.Exception)">
            <summary>
             Initializes a new instance of the DDNodeIncorrectNameException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="name">Node name</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Exceptions.DDNodeIncorrectNameException.Name">
            <summary>
            Node name
            </summary>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDNodeExistsException">
            <summary>
            DrData -- node with same name already exist exception
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DDNodeExistsException class with the default error message.
            <param name="name">Node name</param>
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeExistsException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DDNodeExistsException class with the specified error message.
            </summary>
            <param name="name">Node name</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodeExistsException class with the default error message.
            </summary>
            <param name="name">Node name</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodeExistsException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodeExistsException class with the specified error message.
            </summary>
            <param name="name">Node name</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Exceptions.DDNodeExistsException.Name">
            <summary>
            Node name
            </summary>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDNodesBelongDifferentTrees">
            <summary>
            DrData -- nodes belong to the different trees
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodesBelongDifferentTrees.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the DDNodesBelongDifferentTrees class with the default error message.
            <param name="name">Node name</param>
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodesBelongDifferentTrees.#ctor(System.String[],System.String)">
            <summary>
            Initializes a new instance of the DDNodesBelongDifferentTrees class with the specified error message.
            </summary>
            <param name="name">Node name</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodesBelongDifferentTrees.#ctor(System.String[],System.Exception)">
            <summary>
            Initializes a new instance of the DDNodesBelongDifferentTrees class with the default error message.
            </summary>
            <param name="name">Node name</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDNodesBelongDifferentTrees.#ctor(System.String[],System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDNodesBelongDifferentTrees class with the specified error message.
            </summary>
            <param name="name">Nodes names</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Exceptions.DDNodesBelongDifferentTrees.Names">
            <summary>
            Node name
            </summary>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDTypeException">
            <summary>
            DrData -- type exception
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeException.#ctor(System.String)">
            <summary>
            DrData type exception
            <param name="name">Type name</param>
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeException.#ctor(System.String,System.String)">
            <summary>
            DrData type exception
            </summary>
            <param name="name">Type name</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            DrData type exception
            </summary>
            <param name="name">Type name</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Exceptions.DDTypeException.TypeName">
            <summary>
            Name of type
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeNullException.#ctor">
            <summary>
            Initializes a new instance of the DDTypeNullException class without error message. The type name is "null".
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeNullException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DDTypeNullException class with the specified error message. The type name is "null".
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeNullException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDTypeNullException class with the specified error message. The type name is "null".
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDTypeConvertException">
            <summary>
            
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeConvertException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DDTypeConvertExceptions class without error message.
            <param name="currentType">current type name</param>
            <param name="requestedTypeName">requested type name</param>
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeConvertException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DDTypeConvertExceptions class with the specified error message.
            <param name="currentType">current type name</param>
            <param name="requestedTypeName">requested type name</param>
            <param name="message">A message that describes the error.</param>
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeConvertException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDTypeConvertExceptions class with the specified error message.
            </summary>
            <param name="currentType">current type name</param>
            <param name="requestedTypeName">requested type name</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Exceptions.DDTypeConvertException.RequestedTypeName">
            <summary>
            requested type name
            </summary>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDTypeIncorrectException">
            <summary>
            DrData -- type exception
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeIncorrectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DDTypeIncorrectException class with the default error message.
            </summary>
            <param name="name">Type name</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeIncorrectException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the DDTypeIncorrectException class with the default error message.
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeIncorrectException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DDTypeIncorrectException class with the specified error message.
            </summary>
            <param name="name">Type name</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeIncorrectException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the DDTypeIncorrectException class with the specified error message.
            </summary>
            <param name="type">Type</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeIncorrectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDTypeIncorrectException class with the default error message.
            </summary>
            <param name="name">Type name</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeIncorrectException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the DDTypeIncorrectException class with the default error message.
            </summary>
            <param name="type">Type</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeIncorrectException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDTypeIncorrectException class with the specified error message.
            </summary>
            <param name="name">Type name</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeIncorrectException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDTypeIncorrectException class with the specified error message.
            </summary>
            <param name="type">Type</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDTypeExpectedException">
            <summary>
            DrData -- type exception
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeExpectedException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DDTypeExpectedException class with the default error message.
            <param name="currentTypeName">current type name</param>
            <param name="requestedTypeName">requested type name</param>
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeExpectedException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the DDTypeExpectedException class with the default error message.
            <param name="currentType">Current type</param>
            <param name="requestedType">requested type</param>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DrOpen.DrCommon.DrData.Exceptions.DDTypeExpectedException.#ctor(System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:DrOpen.DrCommon.DrData.Exceptions.DDTypeExpectedException.#ctor(System.Type,System.Type,System.String)" -->
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeExpectedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDTypeExpectedException class with the default error message.
            </summary>
            <param name="currentTypeName">current type name</param>
            <param name="requestedTypeName">requested type name</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeExpectedException.#ctor(System.Type,System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the DDTypeExpectedException class with the default error message.
            </summary>
            <param name="currentType">Current type</param>
            <param name="requestedType">requested type</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeExpectedException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDTypeExpectedException class with the specified error message.
            </summary>
            <param name="currentTypeName">current type name</param>
            <param name="requestedTypeName">requested type name</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDTypeExpectedException.#ctor(System.Type,System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDTypeExpectedException class with the specified error message.
            </summary>
            <param name="currentType">Current type</param>
            <param name="requestedType">requested type</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDValueException">
            <summary>
            DrData value exception
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDValueException.#ctor(System.String)">
            <summary>
            DrData value exception
            <param name="value">value</param>
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDValueException.#ctor(System.String,System.String)">
             <summary>
            DrData value exception
             </summary>
             <param name="value">value</param>
             <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDValueException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            DrData value exception
            </summary>
            <param name="value">value</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Exceptions.DDValueException.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Exceptions.DDValueConvertException">
            <summary>
            Exception by conversion value to specified type
            </summary>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDValueConvertException.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the DDValueConvertException class with the default message
            </summary>
            <param name="value">value to convert</param>
            <param name="requestedType">requested type for conversion</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDValueConvertException.#ctor(System.String[],System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the DDValueConvertException class with the default message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="value">value to convert</param>
            <param name="requestedType">requested type for conversion</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDValueConvertException.#ctor(System.String,System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the DDValueConvertException class with the default message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="value">value to convert</param>
            <param name="requestedType">requested type for conversion</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDValueConvertException.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the DDValueConvertException class with the default message
            </summary>
            <param name="value">value to convert</param>
            <param name="requestedType">requested type for conversion</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDValueConvertException.#ctor(System.String,System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDValueConvertException class with the specified message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="value">value to convert</param>
            <param name="requestedType">requested type for conversion</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:DrOpen.DrCommon.DrData.Exceptions.DDValueConvertException.#ctor(System.String[],System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DDValueConvertException class with the specified message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="value">value to convert</param>
            <param name="requestedType">requested type for conversion</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Exceptions.DDValueConvertException.RequestedTypeFullName">
            <summary>
            >requested type for conversion
            </summary>
        </member>
        <member name="T:DrOpen.DrCommon.DrData.Res.Msg">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.ATTR_DOESNT_EXIST">
            <summary>
              Looks up a localized string similar to The attribute &apos;{0}&apos; doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.ATTRIBUTE_EXISTS">
            <summary>
              Looks up a localized string similar to The attribute &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.ATTRIBUTES_DONT_EXIST">
            <summary>
              Looks up a localized string similar to The attributes &apos;{0}&apos; don&apos;t exist..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.CANNOT_ADD_NODE_BELONG_TO_ANOTHER_PARENT_NODE">
            <summary>
              Looks up a localized string similar to Can not add this node &apos;{0}&apos; as it belongs to another parent node..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.CANNOT_ADD_YOURSELF_AS_CHILD">
            <summary>
              Looks up a localized string similar to You can not add yourself &apos;{0}&apos; as a child node..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.CANNOT_CONVERT_FROM_NONE_STRING_OR_STRING_ARRAY_TYPE">
            <summary>
              Looks up a localized string similar to Cannot transform from not string or string array type to &apos;{0}&apos;. The current type is &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.CANNOT_CONVERT_VALUE_TO_TYPE">
            <summary>
              Looks up a localized string similar to Cannot convert value &apos;{0}&apos; to specified type &apos;{1}.&apos;.
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.CANNOT_MERGE_NODE_WITH_EXIST_NAME">
            <summary>
              Looks up a localized string similar to Cannot merge node &apos;{0}&apos;. The destination node &apos;{1}&apos; already has a child node with the same name..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.CANNOT_NULL_NODE">
            <summary>
              Looks up a localized string similar to Node cannot be null..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.CANNOT_TRANSFORM_ARRAY_TYPE_TO_NOT_ARRAY">
            <summary>
              Looks up a localized string similar to Cannot transform array type to not array type or vice versa. Current type is &apos;{0}&apos;  and the requested type is &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.CANNOT_TRANSFORM_NULL_TYPE">
            <summary>
              Looks up a localized string similar to Cannot transform object whose type is &apos;null&apos;..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.EXPECTED_NODE_TYPE_IS_INCORRECT">
            <summary>
              Looks up a localized string similar to The node type &apos;{0}&apos; is incorrect. Expected node type is &apos;{1}.&apos;.
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.INCORRECT_HEX">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; is incorrect HEX string..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.INCORRECT_NODE_NAME">
            <summary>
              Looks up a localized string similar to The node name &apos;{0}&apos; is incorrect. The node name cannot be empty and cannot contain &apos;/&apos; character. As not well as having a name equal to one &apos;.&apos; or two &apos;..&apos; points..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.INCORRECT_PATH">
            <summary>
              Looks up a localized string similar to The path &apos;{0}&apos; is incorrect..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.NODE_EXISTS">
            <summary>
              Looks up a localized string similar to The node with name &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.NODE_TYPE_IS_NOT_MATCHED">
            <summary>
              Looks up a localized string similar to Node type &apos;{0}&apos; does not match the expected type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.NODES_BELONG_DIFF_TREE">
            <summary>
              Looks up a localized string similar to The nodes &apos;{0}&apos; belong to the different trees..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.OBJ_TYPE_IS_INCORRECT">
            <summary>
              Looks up a localized string similar to The object type &apos;{0}&apos; is incorrect..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.OBJ_TYPE_SHOULD_BE_ARRAY">
            <summary>
              Looks up a localized string similar to Incorrect data type, the specified data should be array..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.OVERWRITE_EXISTS_VALUE">
            <summary>
              Looks up a localized string similar to The current value with the name &apos;{0}&apos; is overwritten with the new value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.PATH_IS_NULL">
            <summary>
              Looks up a localized string similar to The path cannot be null..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.PRESERVE_EXISTS_VALUE">
            <summary>
              Looks up a localized string similar to The current value named &apos;{0}&apos; exists and will be preserved..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.RISE_ABOVE_ROOT_NODE">
            <summary>
              Looks up a localized string similar to Attempt to rise above the root node. The specified path &apos;{0}&apos;  is incorrect..
            </summary>
        </member>
        <member name="P:DrOpen.DrCommon.DrData.Res.Msg.TYPE_IS_NOT_ENUM">
            <summary>
              Looks up a localized string similar to The specified type &apos;{0}&apos; is not Enum..
            </summary>
        </member>
    </members>
</doc>
